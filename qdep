#!/usr/bin/env bash
# qdep — SLURM dependency tree (3‑char prefix blocks)
# -----------------------------------------------------------------------------
# Allowed 3‑char blocks
#   Roots:  "═══"  "╤══"  filler "═══" (or "xxx" for orphan banner)
#   Child:  "   "  "│  "  "└──"  "├──"  "┬──"  filler "───"
# Each depth adds exactly 3 chars, so prefix width = (maxDepth+1)*3.
set -u

################################# 1. Collect jobs #############################
mapfile -t JOBIDS < <(squeue --me --noheader -o "%i")
for i in "${!JOBIDS[@]}"; do JOBIDS[$i]="${JOBIDS[$i]//[[:space:]]/}"; done
JOBSET=" ${JOBIDS[*]} "

################################# 2. Maps #####################################
declare -A INFO CHILDREN PARENTS_ALL PARENTS_ACT
for JOB in "${JOBIDS[@]}"; do
  INFO[$JOB]="$(squeue --me --noheader -j "$JOB")"
  dep=$(scontrol show job "$JOB" | grep -o 'Dependency=[^ ]*' || true)
  [[ -z $dep || $dep == *"(null)"* ]] && continue
  for P in $(grep -oE '[0-9]+' <<< "$dep"); do
    PARENTS_ALL[$JOB]+=" $P"
    if [[ $JOBSET == *" $P "* ]]; then
      PARENTS_ACT[$JOB]+=" $P"
      CHILDREN[$P]+=" $JOB"
    fi
  done
done

################################# 3. Roots ####################################
# --- classify roots and orphans ---------------------------------------------
ROOTS=(); ORPHAN_ROOTS=()
for J in "${JOBIDS[@]}"; do
  if [[ -z ${PARENTS_ALL[$J]:-} ]]; then
    ROOTS+=("$J")                       # genuine root (no parents)
  elif [[ -z ${PARENTS_ACT[$J]:-} ]]; then
    ORPHAN_ROOTS+=("$J")                # all parents inactive → orphan
  fi
done
IFS=$'
' ROOTS=($(sort -n <<< "${ROOTS[*]}")); unset IFS
IFS=$'
' ORPHAN_ROOTS=($(sort -n <<< "${ORPHAN_ROOTS[*]}")); unset IFS

################################# 4. Depth & width ############################
max_depth=0
calc_depth(){ local j=$1 d=$2; (( d>max_depth )) && max_depth=$d; for c in ${CHILDREN[$j]:-}; do calc_depth "$c" $((d+1)); done; }
max_depth=0
for r in "${ROOTS[@]}" "${ORPHAN_ROOTS[@]}"; do calc_depth "$r" 0; done
PADW=$(( (max_depth+1)*3 ))

################################# 5. Helpers ##################################
rep(){ local n=$1 ch=$2; printf '%*s' "$n" '' | tr ' ' "$ch"; }
clen(){ printf '%s' "$1" | wc -m; }

root_banner(){ # $1 has_children(true/false)  $2 orphan(true/false)
  local has=$1 orphan=$2
  if $orphan; then                       # pure‑x banner for DependencyNeverSatisfied roots
    printf '%s' "$(rep $PADW 'x')"
    return
  fi
  local banner='═══'
  $has && banner+='╤══'
  local need=$(( PADW - $(clen "$banner") ))
  while (( need >= 3 )); do banner+='═══'; need=$((need-3)); done
  printf '%s' "$banner"
}

print_line(){ printf '%s %s\n' "$1" "$2"; }

print_tree(){ # $1 job  $2 indent (mult of 3 chars)  $3 lastFlag
  local JOB=$1 indent="$2" last=$3
  local kids=( ${CHILDREN[$JOB]:-} )
  local has_kids=false; [[ ${#kids[@]} -gt 0 ]] && has_kids=true

  local pref="${indent}$([[ $last -eq 1 ]] && echo '└──' || echo '├──')"
  $has_kids && pref+='┬──'
  local remain=$(( PADW - $(clen "$pref") ))
  while (( remain >= 3 )); do pref+='───'; remain=$(( remain-3 )); done
  print_line "$pref" "${INFO[$JOB]}"

  local cnt=${#kids[@]} idx=0 child_indent
  child_indent="$indent"$([[ $last -eq 1 ]] && echo '   ' || echo '│  ')
  
  for kid in "${kids[@]}"; do ((idx++)); print_tree "$kid" "$child_indent" $(( idx==cnt )); done
}

################################# 6. Output ###################################
HEADER=$(squeue --me | head -n 1)
printf '%*s%s\n' "$PADW" '' " $HEADER"
for root in "${ROOTS[@]}"; do
  orphan=false; [[ -n ${PARENTS_ACT[$root]:-} && -n ${PARENTS_ALL[$root]:-} ]] && orphan=true
  has_child=false; [[ -n ${CHILDREN[$root]:-} ]] && has_child=true
  print_line "$(root_banner $has_child $orphan)" "${INFO[$root]}"
  root_kids=( ${CHILDREN[$root]:-} )
  cnt=${#root_kids[@]} idx=0
  for kid in "${root_kids[@]}"; do ((idx++)); print_tree "$kid" '   ' $(( idx==cnt )); done
  echo
done

# --- print orphan roots ------------------------------------------------------
for orphan in "${ORPHAN_ROOTS[@]}"; do
  has_child=false; [[ -n ${CHILDREN[$orphan]:-} ]] && has_child=true
  print_line "$(root_banner $has_child true)" "${INFO[$orphan]}"
  orphan_kids=( ${CHILDREN[$orphan]:-} )
  cnt=${#orphan_kids[@]} idx=0
  for kid in "${orphan_kids[@]}"; do ((idx++)); print_tree "$kid" '   ' $(( idx==cnt )); done
  echo
done

exit 0

